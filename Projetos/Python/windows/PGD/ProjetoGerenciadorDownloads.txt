üìò Documento de Especifica√ß√£o do Projeto ‚ÄúGerenciador de Downloads com Monetiza√ß√£o‚Äù
1. Vis√£o Geral
Constru√ß√£o de uma aplica√ß√£o desktop em Python com interface GUI em Tkinter (inspirada no IDM), capaz de varrer web pages, listar e gerenciar downloads HTTP/HTTPS e torrents (incluindo semeadura), autentica√ß√£o social, uso por cr√©ditos via an√∫ncios e/ou assinatura paga.

2. Requisitos
2.1 Funcionais
Varredura de URL: extra√ß√£o de links de m√≠dia (.mp4, .pdf, .zip, magnet, torrent).

Tabela de arquivos: colunas Nome, Tipo, Tamanho, Progresso, Velocidade, A√ß√µes.

Download HTTP: iniciar, pausar, retomar, cancelar com barra de progresso e velocidade em tempo real.

Download Torrent: iniciar torrent/magnet, semear ao concluir, pausar semeadura.

Gerenciamento de pasta: criar pasta DownloadsApp/, bot√£o para abrir.

Autentica√ß√£o Social: Instagram, Gmail, Facebook via OAuth.

Planilhas no Drive: gerenciar logins e transa√ß√µes (Google Sheets via conta de servi√ßo).

Monetiza√ß√£o: ganhar horas (cr√©dito) assistindo ads ou pagar USD‚ÄØ1/m√™s para remover propagandas.

Controle de cr√©ditos: max 24h, ad disparado no in√≠cio de cada download.

Notifica√ß√µes: pop‚Äëup ou email quando expirado ou download conclu√≠do.

Prefer√™ncias de usu√°rio: limites de velocidade, tema, pasta de destino, banda por sess√£o.

2.2 N√£o Funcionais
Multiplataforma (Windows/macOS/Linux).

Interface responsiva e acess√≠vel (atalhos, alto contraste, screen readers).

Seguran√ßa: uso de vari√°veis de ambiente para credenciais, TLS, OAuth refresh autom√°tico.

Testabilidade: c√≥digo modular com cobertura de testes unit√°rios e integra√ß√£o.

Fallback local caso Google Sheets fique indispon√≠vel.

3. Arquitetura e M√≥dulos
Frontend (Tkinter UI):

Janela com barra de URL, drag&drop, tabela com filtros, buscas, pain√©is de usu√°rio e ads.

Di√°logo de login com OAuth.

Tela de prefer√™ncias/configura√ß√µes.

Backend:

CrawlerModule: extrai e normaliza URLs.

MetaParser: busca HEAD (HTTP) ou metadados do torrent.

HTTPDownloadManager: threading ou asyncio, com banda limite, retries e checksum.

TorrentDownloadManager: integra√ß√£o libtorrent com semeadura controlada.

AuthManager: fluxo OAuth, intera√ß√£o com Google Sheets via Service Account.

AdManager: l√≥gica de exibi√ß√£o de ads, contagem de tempo, ack ao click de download.

PersistenceManager: local/SQLite fallback, estado dos downloads/usu√°rios.

PreferencesManager: gerenciamento de configura√ß√µes do usu√°rio.

Planilhas PGD/:

logins: user_id, provider, email, nome, permiss√µes, status, cadastroEm, expiraEm, creditoHora.

financeiro: transacao_id, user_id, tipo (‚Äúads‚Äù ou ‚Äúpagamento‚Äù), detalhes, valor, horas, metodo, data.

4. Diagramas
4.1 Caso de Uso
mermaid
usecaseDiagram
  actor Usu√°rio
  Usu√°rio --> (Fazer Login Social)
  Usu√°rio --> (Iniciar Propaganda para Cr√©dito)
  Usu√°rio --> (Iniciar Download HTTP ou Torrent)
  Usu√°rio --> (Pausar / Retomar / Cancelar Download ou Semeadura)
  Usu√°rio --> (Abrir Pasta)
  Usu√°rio --> (Alterar Prefer√™ncias)
4.2 Fluxogramas Principais
Login / Monetiza√ß√£o / Ads

mermaid
flowchart TD
  A[App inicia] --> B[Login Social via OAuth]
  B --> C[Verificar ingress√£o na planilha]
  C --> D{J√° cadastrado?}
  D -- N√£o --> E[Registrar e setar creditoHora = 0]
  D -- Sim --> F{expiraEm valida ou cr√©ditoHora > 0?}
  F -- Sim --> G[Abrir Dashboard]
  F -- N√£o --> H[Abrir Ad de 30s ‚Üí +2‚ÄØh cred]
  H --> G
Download (HTTP ou Torrent)
(com verifica√ß√µes de cr√©dito ou assinatura antes de iniciar, e exibi√ß√£o de ad se necess√°rio)

4.3 Sequ√™ncia (Download HTTP com ads)
mermaid
sequenceDiagram
  participant UI
  participant AdMgr
  participant Auth
  participant HTTPMgr
  UI->>Auth: solicitaDownload(itemId)
  Auth->>Auth: verifica assinatura/cr√©ditoHora
  Auth-->>UI: bloqueia ou permite
  Note right of UI: se necess√°rio
  UI->>AdMgr: exibe ad
  AdMgr-->>Auth: +2h creditoHora
  UI->>HTTPMgr: iniciarDownload(itemId)
  HTTPMgr->>HTTPMgr: streaming bloco a bloco
  loop at√© conclu√≠do
    HTTPMgr->>UI: atualizar progresso/velocidade
    UI->>HTTPMgr: checa pause/cancel
  end
  HTTPMgr-->>UI: download conclu√≠do
5. Diagrama de Dados (Entidades / ERD)
mermaid
erDiagram
  USER ||--o{ TRANSACTION : has
  USER {
    string user_id PK
    string provider
    string email
    string nome
    string status
    datetime cadastroEm
    datetime expiraEm
    int creditoHora
  }
  TRANSACTION {
    string transacao_id PK
    string user_id FK
    string tipo
    string detalhes
    float valor
    int horas
    datetime data
  }
  ITEM ||--o{ DOWNLOAD : referencia
  ITEM {
    string itemId PK
    string url
    string nome
    string tipo
    int tamanho
  }
  DOWNLOAD {
    string downloadId PK
    string itemId FK
    string user_id FK
    string status
    float progresso
    float velocidade
    datetime iniciadoEm
  }
  TORRENT ||--o{ PIECE : cont√©m
  TORRENT {
    string torrentId PK
    string itemId FK
    int totalPieces
  }
  PIECE {
    string pieceId PK
    int index
    bool baixado
  }
6. Diagrama de Classes Simplificado (Backend)
classDiagram
  class AuthManager { +login(provider) +verificarUsuario() +obterCreditos() }
  class AdManager { +exibirAd() +creditarHoras() }
  class CrawlerModule { +extrairLinks(url) }
  class MetaParser { +obterMetadados(item) }
  class HTTPDownloadManager { +iniciar(), +pausar(), +retomar(), +cancelar() }
  class TorrentDownloadManager { +iniciarTorrent(), +pausarSemeadura(), ... }
  class PersistenceManager { +salvarEstado(), +carregarEstado() }
  class PreferencesManager { +carregar(), +salvar() }

  AuthManager --> User
  AuthManager --> GoogleSheetsAPI
  AdManager --> AuthManager
  HTTPDownloadManager --> Item
  TorrentDownloadManager --> Item
7. Ergonomia e Usabilidade (Melhorias aplicadas)
Drag & Drop de URL/Torrent.

Pesquisa e filtros na tabela de downloads.

Agrupamento por status, √≠cones, cores.

Notifica√ß√µes de sistema (toast pop-ups).

Prefer√™ncias do usu√°rio (tema claro/escuro, limites de banda, idioma).

Atalhos de teclado e suporte a leitores de tela.

Feedback visual durante ads (‚ÄúAssista 30‚ÄØs‚Ä¶‚Äù).

8. Monetiza√ß√£o e UX de Ads
Ads disparados apenas quando um download come√ßa de fato.

Timer de 30 segundos bloqueante, com barra visual e mensagem clara ‚Äú+2h de uso‚Äù.

Painel financeiro dentro da UI para visualizar hist√≥rico de ad ganhos e pagamentos.

Op√ß√£o de assinatura autom√°tica via Pix ou cart√£o (bot√£o ‚ÄúRenovar assinatura‚Äù).

9. Backend Robustez
Limita√ß√£o de banda configur√°vel por sess√£o e por download.

Retry autom√°tico e reconex√£o.

Checksum verifica√ß√£o p√≥s-downloader.

OAuth refresh automatizado.

Fallback local a planilha Google.

Configur√°vel n√∫mero m√°ximo de downloads simult√¢neos.

Seguran√ßa: uso de vari√°veis de ambiente para client secret e tokens.

10. Deployment, Testes e Roadmap
Deployment: PyInstaller para Windows/Linux/macOS, Homebrew / Snap opcional.

Testes: cobertura unit√°ria (Crawler, Auth, Download managers, Ads), integra√ß√£o com mock de APIs.

Roadmap:

v1.0: crawler + HTTP download

v1.1: torrent + semeadura

v1.2: login social e planilha Google Sheets

v1.3: ads + monetiza√ß√£o + painel financeiro

v1.4: interface e usabilidade polida